// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/shirasudon/go-chat/domain (interfaces: Conn)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	domain "github.com/shirasudon/go-chat/domain"
	reflect "reflect"
)

// MockConn is a mock of Conn interface
type MockConn struct {
	ctrl     *gomock.Controller
	recorder *MockConnMockRecorder
}

// MockConnMockRecorder is the mock recorder for MockConn
type MockConnMockRecorder struct {
	mock *MockConn
}

// NewMockConn creates a new mock instance
func NewMockConn(ctrl *gomock.Controller) *MockConn {
	mock := &MockConn{ctrl: ctrl}
	mock.recorder = &MockConnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConn) EXPECT() *MockConnMockRecorder {
	return m.recorder
}

// Send mocks base method
func (m *MockConn) Send(arg0 domain.Event) {
	m.ctrl.Call(m, "Send", arg0)
}

// Send indicates an expected call of Send
func (mr *MockConnMockRecorder) Send(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockConn)(nil).Send), arg0)
}

// UserID mocks base method
func (m *MockConn) UserID() uint64 {
	ret := m.ctrl.Call(m, "UserID")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// UserID indicates an expected call of UserID
func (mr *MockConnMockRecorder) UserID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserID", reflect.TypeOf((*MockConn)(nil).UserID))
}
