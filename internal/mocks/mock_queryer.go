// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/shirasudon/go-chat/chat (interfaces: UserQueryer,RoomQueryer,MessageQueryer)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	domain "github.com/shirasudon/go-chat/domain"
	reflect "reflect"
	time "time"
)

// MockUserQueryer is a mock of UserQueryer interface
type MockUserQueryer struct {
	ctrl     *gomock.Controller
	recorder *MockUserQueryerMockRecorder
}

// MockUserQueryerMockRecorder is the mock recorder for MockUserQueryer
type MockUserQueryerMockRecorder struct {
	mock *MockUserQueryer
}

// NewMockUserQueryer creates a new mock instance
func NewMockUserQueryer(ctrl *gomock.Controller) *MockUserQueryer {
	mock := &MockUserQueryer{ctrl: ctrl}
	mock.recorder = &MockUserQueryerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserQueryer) EXPECT() *MockUserQueryerMockRecorder {
	return m.recorder
}

// Find mocks base method
func (m *MockUserQueryer) Find(arg0 context.Context, arg1 uint64) (domain.User, error) {
	ret := m.ctrl.Call(m, "Find", arg0, arg1)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockUserQueryerMockRecorder) Find(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockUserQueryer)(nil).Find), arg0, arg1)
}

// MockRoomQueryer is a mock of RoomQueryer interface
type MockRoomQueryer struct {
	ctrl     *gomock.Controller
	recorder *MockRoomQueryerMockRecorder
}

// MockRoomQueryerMockRecorder is the mock recorder for MockRoomQueryer
type MockRoomQueryerMockRecorder struct {
	mock *MockRoomQueryer
}

// NewMockRoomQueryer creates a new mock instance
func NewMockRoomQueryer(ctrl *gomock.Controller) *MockRoomQueryer {
	mock := &MockRoomQueryer{ctrl: ctrl}
	mock.recorder = &MockRoomQueryerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRoomQueryer) EXPECT() *MockRoomQueryerMockRecorder {
	return m.recorder
}

// Find mocks base method
func (m *MockRoomQueryer) Find(arg0 context.Context, arg1 uint64) (domain.Room, error) {
	ret := m.ctrl.Call(m, "Find", arg0, arg1)
	ret0, _ := ret[0].(domain.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockRoomQueryerMockRecorder) Find(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockRoomQueryer)(nil).Find), arg0, arg1)
}

// FindAllByUserID mocks base method
func (m *MockRoomQueryer) FindAllByUserID(arg0 context.Context, arg1 uint64) ([]domain.Room, error) {
	ret := m.ctrl.Call(m, "FindAllByUserID", arg0, arg1)
	ret0, _ := ret[0].([]domain.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllByUserID indicates an expected call of FindAllByUserID
func (mr *MockRoomQueryerMockRecorder) FindAllByUserID(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllByUserID", reflect.TypeOf((*MockRoomQueryer)(nil).FindAllByUserID), arg0, arg1)
}

// MockMessageQueryer is a mock of MessageQueryer interface
type MockMessageQueryer struct {
	ctrl     *gomock.Controller
	recorder *MockMessageQueryerMockRecorder
}

// MockMessageQueryerMockRecorder is the mock recorder for MockMessageQueryer
type MockMessageQueryerMockRecorder struct {
	mock *MockMessageQueryer
}

// NewMockMessageQueryer creates a new mock instance
func NewMockMessageQueryer(ctrl *gomock.Controller) *MockMessageQueryer {
	mock := &MockMessageQueryer{ctrl: ctrl}
	mock.recorder = &MockMessageQueryerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMessageQueryer) EXPECT() *MockMessageQueryerMockRecorder {
	return m.recorder
}

// FindRoomMessagesOrderByLatest mocks base method
func (m *MockMessageQueryer) FindRoomMessagesOrderByLatest(arg0 context.Context, arg1 uint64, arg2 time.Time, arg3 int) ([]domain.Message, error) {
	ret := m.ctrl.Call(m, "FindRoomMessagesOrderByLatest", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]domain.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRoomMessagesOrderByLatest indicates an expected call of FindRoomMessagesOrderByLatest
func (mr *MockMessageQueryerMockRecorder) FindRoomMessagesOrderByLatest(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRoomMessagesOrderByLatest", reflect.TypeOf((*MockMessageQueryer)(nil).FindRoomMessagesOrderByLatest), arg0, arg1, arg2, arg3)
}
