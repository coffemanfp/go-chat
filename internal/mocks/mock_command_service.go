// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/shirasudon/go-chat/chat (interfaces: CommandService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	action "github.com/shirasudon/go-chat/chat/action"
	reflect "reflect"
)

// MockCommandService is a mock of CommandService interface
type MockCommandService struct {
	ctrl     *gomock.Controller
	recorder *MockCommandServiceMockRecorder
}

// MockCommandServiceMockRecorder is the mock recorder for MockCommandService
type MockCommandServiceMockRecorder struct {
	mock *MockCommandService
}

// NewMockCommandService creates a new mock instance
func NewMockCommandService(ctrl *gomock.Controller) *MockCommandService {
	mock := &MockCommandService{ctrl: ctrl}
	mock.recorder = &MockCommandServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCommandService) EXPECT() *MockCommandServiceMockRecorder {
	return m.recorder
}

// CreateRoom mocks base method
func (m *MockCommandService) CreateRoom(arg0 context.Context, arg1 action.CreateRoom) (uint64, error) {
	ret := m.ctrl.Call(m, "CreateRoom", arg0, arg1)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRoom indicates an expected call of CreateRoom
func (mr *MockCommandServiceMockRecorder) CreateRoom(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoom", reflect.TypeOf((*MockCommandService)(nil).CreateRoom), arg0, arg1)
}

// DeleteRoom mocks base method
func (m *MockCommandService) DeleteRoom(arg0 context.Context, arg1 action.DeleteRoom) (uint64, error) {
	ret := m.ctrl.Call(m, "DeleteRoom", arg0, arg1)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRoom indicates an expected call of DeleteRoom
func (mr *MockCommandServiceMockRecorder) DeleteRoom(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoom", reflect.TypeOf((*MockCommandService)(nil).DeleteRoom), arg0, arg1)
}

// PostRoomMessage mocks base method
func (m *MockCommandService) PostRoomMessage(arg0 context.Context, arg1 action.ChatMessage) (uint64, error) {
	ret := m.ctrl.Call(m, "PostRoomMessage", arg0, arg1)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostRoomMessage indicates an expected call of PostRoomMessage
func (mr *MockCommandServiceMockRecorder) PostRoomMessage(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostRoomMessage", reflect.TypeOf((*MockCommandService)(nil).PostRoomMessage), arg0, arg1)
}

// ReadRoomMessages mocks base method
func (m *MockCommandService) ReadRoomMessages(arg0 context.Context, arg1 action.ReadMessages) (uint64, error) {
	ret := m.ctrl.Call(m, "ReadRoomMessages", arg0, arg1)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadRoomMessages indicates an expected call of ReadRoomMessages
func (mr *MockCommandServiceMockRecorder) ReadRoomMessages(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadRoomMessages", reflect.TypeOf((*MockCommandService)(nil).ReadRoomMessages), arg0, arg1)
}
