// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/shirasudon/go-chat/domain (interfaces: RoomRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	sql "database/sql"
	gomock "github.com/golang/mock/gomock"
	domain "github.com/shirasudon/go-chat/domain"
	reflect "reflect"
)

// MockRoomRepository is a mock of RoomRepository interface
type MockRoomRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRoomRepositoryMockRecorder
}

// MockRoomRepositoryMockRecorder is the mock recorder for MockRoomRepository
type MockRoomRepositoryMockRecorder struct {
	mock *MockRoomRepository
}

// NewMockRoomRepository creates a new mock instance
func NewMockRoomRepository(ctrl *gomock.Controller) *MockRoomRepository {
	mock := &MockRoomRepository{ctrl: ctrl}
	mock.recorder = &MockRoomRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRoomRepository) EXPECT() *MockRoomRepositoryMockRecorder {
	return m.recorder
}

// BeginTx mocks base method
func (m *MockRoomRepository) BeginTx(arg0 context.Context, arg1 *sql.TxOptions) (domain.Tx, error) {
	ret := m.ctrl.Call(m, "BeginTx", arg0, arg1)
	ret0, _ := ret[0].(domain.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx
func (mr *MockRoomRepositoryMockRecorder) BeginTx(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockRoomRepository)(nil).BeginTx), arg0, arg1)
}

// Find mocks base method
func (m *MockRoomRepository) Find(arg0 context.Context, arg1 uint64) (domain.Room, error) {
	ret := m.ctrl.Call(m, "Find", arg0, arg1)
	ret0, _ := ret[0].(domain.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockRoomRepositoryMockRecorder) Find(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockRoomRepository)(nil).Find), arg0, arg1)
}

// FindAllByUserID mocks base method
func (m *MockRoomRepository) FindAllByUserID(arg0 context.Context, arg1 uint64) ([]domain.Room, error) {
	ret := m.ctrl.Call(m, "FindAllByUserID", arg0, arg1)
	ret0, _ := ret[0].([]domain.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllByUserID indicates an expected call of FindAllByUserID
func (mr *MockRoomRepositoryMockRecorder) FindAllByUserID(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllByUserID", reflect.TypeOf((*MockRoomRepository)(nil).FindAllByUserID), arg0, arg1)
}

// Remove mocks base method
func (m *MockRoomRepository) Remove(arg0 context.Context, arg1 domain.Room) error {
	ret := m.ctrl.Call(m, "Remove", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove
func (mr *MockRoomRepositoryMockRecorder) Remove(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockRoomRepository)(nil).Remove), arg0, arg1)
}

// Store mocks base method
func (m *MockRoomRepository) Store(arg0 context.Context, arg1 domain.Room) (uint64, error) {
	ret := m.ctrl.Call(m, "Store", arg0, arg1)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Store indicates an expected call of Store
func (mr *MockRoomRepositoryMockRecorder) Store(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockRoomRepository)(nil).Store), arg0, arg1)
}
