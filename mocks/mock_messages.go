// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/shirasudon/go-chat/domain (interfaces: MessageRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	sql "database/sql"
	gomock "github.com/golang/mock/gomock"
	domain "github.com/shirasudon/go-chat/domain"
	reflect "reflect"
)

// MockMessageRepository is a mock of MessageRepository interface
type MockMessageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMessageRepositoryMockRecorder
}

// MockMessageRepositoryMockRecorder is the mock recorder for MockMessageRepository
type MockMessageRepositoryMockRecorder struct {
	mock *MockMessageRepository
}

// NewMockMessageRepository creates a new mock instance
func NewMockMessageRepository(ctrl *gomock.Controller) *MockMessageRepository {
	mock := &MockMessageRepository{ctrl: ctrl}
	mock.recorder = &MockMessageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMessageRepository) EXPECT() *MockMessageRepositoryMockRecorder {
	return m.recorder
}

// BeginTx mocks base method
func (m *MockMessageRepository) BeginTx(arg0 context.Context, arg1 *sql.TxOptions) (domain.Tx, error) {
	ret := m.ctrl.Call(m, "BeginTx", arg0, arg1)
	ret0, _ := ret[0].(domain.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx
func (mr *MockMessageRepositoryMockRecorder) BeginTx(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockMessageRepository)(nil).BeginTx), arg0, arg1)
}

// Find mocks base method
func (m *MockMessageRepository) Find(arg0 context.Context, arg1 uint64) (domain.Message, error) {
	ret := m.ctrl.Call(m, "Find", arg0, arg1)
	ret0, _ := ret[0].(domain.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockMessageRepositoryMockRecorder) Find(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockMessageRepository)(nil).Find), arg0, arg1)
}

// FindAllByRoomIDOrderByLatest mocks base method
func (m *MockMessageRepository) FindAllByRoomIDOrderByLatest(arg0 context.Context, arg1 uint64, arg2 int) ([]domain.Message, error) {
	ret := m.ctrl.Call(m, "FindAllByRoomIDOrderByLatest", arg0, arg1, arg2)
	ret0, _ := ret[0].([]domain.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllByRoomIDOrderByLatest indicates an expected call of FindAllByRoomIDOrderByLatest
func (mr *MockMessageRepositoryMockRecorder) FindAllByRoomIDOrderByLatest(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllByRoomIDOrderByLatest", reflect.TypeOf((*MockMessageRepository)(nil).FindAllByRoomIDOrderByLatest), arg0, arg1, arg2)
}

// FindPreviousMessagesOrderByLatest mocks base method
func (m *MockMessageRepository) FindPreviousMessagesOrderByLatest(arg0 context.Context, arg1 domain.Message, arg2 int) ([]domain.Message, error) {
	ret := m.ctrl.Call(m, "FindPreviousMessagesOrderByLatest", arg0, arg1, arg2)
	ret0, _ := ret[0].([]domain.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPreviousMessagesOrderByLatest indicates an expected call of FindPreviousMessagesOrderByLatest
func (mr *MockMessageRepositoryMockRecorder) FindPreviousMessagesOrderByLatest(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPreviousMessagesOrderByLatest", reflect.TypeOf((*MockMessageRepository)(nil).FindPreviousMessagesOrderByLatest), arg0, arg1, arg2)
}

// RemoveAllByRoomID mocks base method
func (m *MockMessageRepository) RemoveAllByRoomID(arg0 context.Context, arg1 uint64) error {
	ret := m.ctrl.Call(m, "RemoveAllByRoomID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAllByRoomID indicates an expected call of RemoveAllByRoomID
func (mr *MockMessageRepositoryMockRecorder) RemoveAllByRoomID(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAllByRoomID", reflect.TypeOf((*MockMessageRepository)(nil).RemoveAllByRoomID), arg0, arg1)
}

// Store mocks base method
func (m *MockMessageRepository) Store(arg0 context.Context, arg1 domain.Message) (uint64, error) {
	ret := m.ctrl.Call(m, "Store", arg0, arg1)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Store indicates an expected call of Store
func (mr *MockMessageRepositoryMockRecorder) Store(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockMessageRepository)(nil).Store), arg0, arg1)
}
