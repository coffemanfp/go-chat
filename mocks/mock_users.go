// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/shirasudon/go-chat/domain (interfaces: UserRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	sql "database/sql"
	gomock "github.com/golang/mock/gomock"
	domain "github.com/shirasudon/go-chat/domain"
	reflect "reflect"
)

// MockUserRepository is a mock of UserRepository interface
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// BeginTx mocks base method
func (m *MockUserRepository) BeginTx(arg0 context.Context, arg1 *sql.TxOptions) (domain.Tx, error) {
	ret := m.ctrl.Call(m, "BeginTx", arg0, arg1)
	ret0, _ := ret[0].(domain.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx
func (mr *MockUserRepositoryMockRecorder) BeginTx(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockUserRepository)(nil).BeginTx), arg0, arg1)
}

// ExistByNameAndPassword mocks base method
func (m *MockUserRepository) ExistByNameAndPassword(arg0 context.Context, arg1, arg2 string) bool {
	ret := m.ctrl.Call(m, "ExistByNameAndPassword", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ExistByNameAndPassword indicates an expected call of ExistByNameAndPassword
func (mr *MockUserRepositoryMockRecorder) ExistByNameAndPassword(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistByNameAndPassword", reflect.TypeOf((*MockUserRepository)(nil).ExistByNameAndPassword), arg0, arg1, arg2)
}

// Find mocks base method
func (m *MockUserRepository) Find(arg0 context.Context, arg1 uint64) (domain.User, error) {
	ret := m.ctrl.Call(m, "Find", arg0, arg1)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockUserRepositoryMockRecorder) Find(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockUserRepository)(nil).Find), arg0, arg1)
}

// FindAllByUserID mocks base method
func (m *MockUserRepository) FindAllByUserID(arg0 context.Context, arg1 uint64) ([]domain.User, error) {
	ret := m.ctrl.Call(m, "FindAllByUserID", arg0, arg1)
	ret0, _ := ret[0].([]domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllByUserID indicates an expected call of FindAllByUserID
func (mr *MockUserRepositoryMockRecorder) FindAllByUserID(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllByUserID", reflect.TypeOf((*MockUserRepository)(nil).FindAllByUserID), arg0, arg1)
}

// FindByNameAndPassword mocks base method
func (m *MockUserRepository) FindByNameAndPassword(arg0 context.Context, arg1, arg2 string) (domain.User, error) {
	ret := m.ctrl.Call(m, "FindByNameAndPassword", arg0, arg1, arg2)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByNameAndPassword indicates an expected call of FindByNameAndPassword
func (mr *MockUserRepositoryMockRecorder) FindByNameAndPassword(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByNameAndPassword", reflect.TypeOf((*MockUserRepository)(nil).FindByNameAndPassword), arg0, arg1, arg2)
}

// Store mocks base method
func (m *MockUserRepository) Store(arg0 context.Context, arg1 domain.User) (uint64, error) {
	ret := m.ctrl.Call(m, "Store", arg0, arg1)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Store indicates an expected call of Store
func (mr *MockUserRepositoryMockRecorder) Store(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockUserRepository)(nil).Store), arg0, arg1)
}
